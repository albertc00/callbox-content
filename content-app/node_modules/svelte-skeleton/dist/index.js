(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Skeleton = factory());
})(this, (function () { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /* src/Skeleton.svelte generated by Svelte v3.46.3 */

    function fallback_block(ctx) {
    	let rect;

    	return {
    		c() {
    			rect = svg_element("rect");
    			attr(rect, "width", /*width*/ ctx[3]);
    			attr(rect, "height", /*height*/ ctx[2]);
    			attr(rect, "x", "0");
    			attr(rect, "y", "0");
    			attr(rect, "rx", "8");
    			attr(rect, "ry", "8");
    		},
    		m(target, anchor) {
    			insert(target, rect, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*width*/ 8) {
    				attr(rect, "width", /*width*/ ctx[3]);
    			}

    			if (dirty & /*height*/ 4) {
    				attr(rect, "height", /*height*/ ctx[2]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(rect);
    		}
    	};
    }

    // (34:3) {#if animate}
    function create_if_block(ctx) {
    	let animate0;
    	let animate0_from_value;
    	let animate0_dur_value;
    	let animate1;
    	let animate1_to_value;
    	let animate1_dur_value;

    	return {
    		c() {
    			animate0 = svg_element("animate");
    			animate1 = svg_element("animate");
    			attr(animate0, "attributeName", "x1");
    			attr(animate0, "from", animate0_from_value = "-" + /*secondaryColorPercentWidth*/ ctx[6] + "%");
    			attr(animate0, "to", "100%");
    			attr(animate0, "dur", animate0_dur_value = "" + (/*speed*/ ctx[4] + "s"));
    			attr(animate0, "repeatCount", "indefinite");
    			attr(animate1, "attributeName", "x2");
    			attr(animate1, "from", "0%");
    			attr(animate1, "to", animate1_to_value = "" + (100 + /*secondaryColorPercentWidth*/ ctx[6] + "%"));
    			attr(animate1, "dur", animate1_dur_value = "" + (/*speed*/ ctx[4] + "s"));
    			attr(animate1, "repeatCount", "indefinite");
    		},
    		m(target, anchor) {
    			insert(target, animate0, anchor);
    			insert(target, animate1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*secondaryColorPercentWidth*/ 64 && animate0_from_value !== (animate0_from_value = "-" + /*secondaryColorPercentWidth*/ ctx[6] + "%")) {
    				attr(animate0, "from", animate0_from_value);
    			}

    			if (dirty & /*speed*/ 16 && animate0_dur_value !== (animate0_dur_value = "" + (/*speed*/ ctx[4] + "s"))) {
    				attr(animate0, "dur", animate0_dur_value);
    			}

    			if (dirty & /*secondaryColorPercentWidth*/ 64 && animate1_to_value !== (animate1_to_value = "" + (100 + /*secondaryColorPercentWidth*/ ctx[6] + "%"))) {
    				attr(animate1, "to", animate1_to_value);
    			}

    			if (dirty & /*speed*/ 16 && animate1_dur_value !== (animate1_dur_value = "" + (/*speed*/ ctx[4] + "s"))) {
    				attr(animate1, "dur", animate1_dur_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(animate0);
    			if (detaching) detach(animate1);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let svg;
    	let rect;
    	let defs;
    	let clipPath;
    	let linearGradient;
    	let stop0;
    	let stop1;
    	let stop2;
    	let linearGradient_x__value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);
    	let if_block = /*animate*/ ctx[5] && create_if_block(ctx);

    	return {
    		c() {
    			svg = svg_element("svg");
    			rect = svg_element("rect");
    			defs = svg_element("defs");
    			clipPath = svg_element("clipPath");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			linearGradient = svg_element("linearGradient");
    			if (if_block) if_block.c();
    			stop0 = svg_element("stop");
    			stop1 = svg_element("stop");
    			stop2 = svg_element("stop");
    			attr(rect, "fill", "url(#" + /*idGradient*/ ctx[9] + ")");
    			attr(rect, "clip-path", "url(#" + /*idClip*/ ctx[8] + ")");
    			attr(rect, "width", /*width*/ ctx[3]);
    			attr(rect, "height", /*height*/ ctx[2]);
    			attr(rect, "x", "0");
    			attr(rect, "y", "0");
    			attr(clipPath, "id", /*idClip*/ ctx[8]);
    			attr(stop0, "stop-color", /*primaryColor*/ ctx[1]);
    			attr(stop0, "offset", "0%");
    			attr(stop1, "stop-color", /*secondaryColor*/ ctx[0]);
    			attr(stop1, "offset", "50%");
    			attr(stop2, "stop-color", /*primaryColor*/ ctx[1]);
    			attr(stop2, "offset", "100%");
    			attr(linearGradient, "id", /*idGradient*/ ctx[9]);
    			attr(linearGradient, "x1", linearGradient_x__value = "-" + /*secondaryColorPercentWidth*/ ctx[6] + "%");
    			attr(linearGradient, "y1", "50%");
    			attr(linearGradient, "x2", "0%");
    			attr(linearGradient, "y2", "50%");
    			attr(svg, "width", /*width*/ ctx[3]);
    			attr(svg, "height", /*height*/ ctx[2]);
    			attr(svg, "aria-label", /*ariaLabel*/ ctx[7]);
    			attr(svg, "preserveAspectRatio", "none");
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, rect);
    			append(svg, defs);
    			append(defs, clipPath);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(clipPath, null);
    			}

    			append(defs, linearGradient);
    			if (if_block) if_block.m(linearGradient, null);
    			append(linearGradient, stop0);
    			append(linearGradient, stop1);
    			append(linearGradient, stop2);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (!current || dirty & /*width*/ 8) {
    				attr(rect, "width", /*width*/ ctx[3]);
    			}

    			if (!current || dirty & /*height*/ 4) {
    				attr(rect, "height", /*height*/ ctx[2]);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*width, height*/ 12)) {
    					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			if (/*animate*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(linearGradient, stop0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*primaryColor*/ 2) {
    				attr(stop0, "stop-color", /*primaryColor*/ ctx[1]);
    			}

    			if (!current || dirty & /*secondaryColor*/ 1) {
    				attr(stop1, "stop-color", /*secondaryColor*/ ctx[0]);
    			}

    			if (!current || dirty & /*primaryColor*/ 2) {
    				attr(stop2, "stop-color", /*primaryColor*/ ctx[1]);
    			}

    			if (!current || dirty & /*secondaryColorPercentWidth*/ 64 && linearGradient_x__value !== (linearGradient_x__value = "-" + /*secondaryColorPercentWidth*/ ctx[6] + "%")) {
    				attr(linearGradient, "x1", linearGradient_x__value);
    			}

    			if (!current || dirty & /*width*/ 8) {
    				attr(svg, "width", /*width*/ ctx[3]);
    			}

    			if (!current || dirty & /*height*/ 4) {
    				attr(svg, "height", /*height*/ ctx[2]);
    			}

    			if (!current || dirty & /*ariaLabel*/ 128) {
    				attr(svg, "aria-label", /*ariaLabel*/ ctx[7]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};
    }

    function getUniqueId() {
    	return Math.random().toString(36).substring(2);
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { secondaryColor = '#F5F5F7' } = $$props; // do not use rgba() - not working in Safari on iOS 11
    	let { primaryColor = '#EBECEF' } = $$props;
    	let { height = 200 } = $$props;
    	let { width = 400 } = $$props;
    	let { speed = 2 } = $$props;
    	let { animate = true } = $$props;
    	let { secondaryColorPercentWidth = 100 } = $$props;
    	let { ariaLabel = null } = $$props;
    	let idClip = getUniqueId();
    	let idGradient = getUniqueId();

    	$$self.$$set = $$props => {
    		if ('secondaryColor' in $$props) $$invalidate(0, secondaryColor = $$props.secondaryColor);
    		if ('primaryColor' in $$props) $$invalidate(1, primaryColor = $$props.primaryColor);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('width' in $$props) $$invalidate(3, width = $$props.width);
    		if ('speed' in $$props) $$invalidate(4, speed = $$props.speed);
    		if ('animate' in $$props) $$invalidate(5, animate = $$props.animate);
    		if ('secondaryColorPercentWidth' in $$props) $$invalidate(6, secondaryColorPercentWidth = $$props.secondaryColorPercentWidth);
    		if ('ariaLabel' in $$props) $$invalidate(7, ariaLabel = $$props.ariaLabel);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	return [
    		secondaryColor,
    		primaryColor,
    		height,
    		width,
    		speed,
    		animate,
    		secondaryColorPercentWidth,
    		ariaLabel,
    		idClip,
    		idGradient,
    		$$scope,
    		slots
    	];
    }

    class Skeleton extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			secondaryColor: 0,
    			primaryColor: 1,
    			height: 2,
    			width: 3,
    			speed: 4,
    			animate: 5,
    			secondaryColorPercentWidth: 6,
    			ariaLabel: 7
    		});
    	}
    }

    return Skeleton;

}));
